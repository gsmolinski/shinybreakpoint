% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinybreakpoint_mod.R
\name{shinybreakpointServer}
\alias{shinybreakpointServer}
\title{Use Module to Set Breakpoint}
\usage{
shinybreakpointServer(
  keyEvent = "F4",
  id = "shinybreakpoint",
  varName = "....envirr"
)
}
\arguments{
\item{keyEvent}{key to run modal dialog with the functionality
to set breakpoint. \code{"F4"} by default.}

\item{id}{namespace used for all inputs and outputs in this module.
\code{"shinybreakpoint"} by default. Change if in the app some
other module is used which already has \code{"shinybreakpoint"}
namespace.}

\item{varName}{setting breakpoint is not equal to inserting only
\code{browser()}, but also additional code, one of which is assignment
operation. This parameter determines the variable name to assign
value. \code{"....envirr"} by default. Change if this name is already
in use somewhere in the app.}
}
\value{
Used for side effect - adds modal dialog to the Shiny app
with the options to set breakpoint. Modal dialog is shown
when the key specified in \code{keyEvent} is pressed.
}
\description{
Module of Shiny app needed to enable functionality to
setting breakpoint. Must be used in the \code{server} part of
Shiny app or in the function which is then used in the
\code{server} part of app.
}
\section{App structure}{


One of the core concepts which founds this module is the
necessity to re-run the objects present in the \code{server}
part of app. This is possible only when these objects
do not live directly in the \code{server}, but in the function
which is then used in \code{server}. This naturally harmonizes
with the modules, but it needs the separate function for
objects which would be used directly in the \code{server}.

\code{shinybreakpointServer} module was developed having Bootstrap 5
in mind, that's why it is recommended to use \code{\link[bslib:bs_theme]{bslib::bs_theme()}}
to set up Bootstrap 5. Otherwise the UI experience will be
worse.

Possibility to filter reactive context depending on specific
\code{input} or \code{output} needs \code{\link[shiny:reactlog]{shiny::reactlog()}} enabled,
which is done by \code{options(shiny.reactlog = TRUE)}. This line
of code needs to be removed before app will be sent to production
(which is of course true also for
\code{shinybreakpoint::shinybreakpointServer()} line).

See example section below for the idea of how to include all of this
requirements in the app. This can also be done by
\code{\link[=snippet]{snippet()}} for new apps.
}

\section{Filtering by Id}{


As long as \code{\link[shiny:reactlog]{shiny::reactlog()}} is enabled, it is possible to filter
displayed source code based on \code{input} or \code{output} Id, i.e. only
the relevant source code (\code{reactive}s, \code{observe}s and \verb{render*} functions)
will be shown. Two modes are available:
\itemize{
\item Last changed input - last changed input is tracked automatically, i.e.
nothing special needs to be done.
\item Chosen Id - by holding \code{Ctrl} on PC or \code{Cmd} on Mac and hovering mouse
over \code{input} or \code{output}, Id for this element will be saved (which will
be indicated by displaying cursor of type 'progress' for a moment).
}

To successfully see all relevant source code for Id, it is necessary
to ensure that code inside \code{reactive}s, \code{observe}s and \verb{render*} functions
is in curly (\code{{}}) brackets and that \code{observe}s as well as \code{\link[shiny:bindEvent]{shiny::bindEvent()}}
(if used) have label, i.e. \emph{string} is passed \emph{directly} to the \code{label}
parameter. Label needs to be unique across all labels \emph{and} Ids. Additionally,
if \code{\link[shiny:bindEvent]{shiny::bindEvent()}} is used on \verb{render*} function, label must be \emph{the same as}
the \code{output} Id. Because in this last case Id is masked by \code{\link[shiny:bindEvent]{shiny::bindEvent()}},
there is no afraid that label and Id won't be unique.
}

\examples{
# To run example, copy-paste to file, save
# the file and run the app. Then press "F4"
# to open the modal dialog.

\dontrun{

library(shiny)

options(shiny.reactlog = TRUE) # TODO: remove

appServer <- function(input, output, session) {
  observe({
    input$num
  }, label = "observe_print_num_input")
}

shinyApp(
  ui = fluidPage(
    theme = bslib::bs_theme(5),
    numericInput("num", "Num", 0)
  ),
  server = function(input, output, session) {
    shinybreakpoint::shinybreakpointServer() # TODO: remove
    appServer(input, output, session)
  }
)
}
}
